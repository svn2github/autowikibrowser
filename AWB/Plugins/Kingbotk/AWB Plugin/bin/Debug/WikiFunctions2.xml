<?xml version="1.0"?>
<doc>
<assembly>
<name>
WikiFunctions2
</name>
</assembly>
<members>
<member name="M:WikiFunctions.Encryption.RijndaelSimple.Encrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
	<summary>
 Encrypts specified plaintext using Rijndael symmetric key algorithm
 and returns a base64-encoded result.
 </summary>
	<param name="plainText">
 Plaintext value to be encrypted.
 </param>
	<param name="passPhrase">
 Passphrase from which a pseudo-random password will be derived. The 
 derived password will be used to generate the encryption key. 
 Passphrase can be any string. In this example we assume that this 
 passphrase is an ASCII string.
 </param>
	<param name="saltValue">
 Salt value used along with passphrase to generate password. Salt can 
 be any string. In this example we assume that salt is an ASCII string.
 </param>
	<param name="hashAlgorithm">
 Hash algorithm used to generate password. Allowed values are: "MD5" and
 "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
 </param>
	<param name="passwordIterations">
 Number of iterations used to generate password. One or two iterations
 should be enough.
 </param>
	<param name="initVector">
 Initialization vector (or IV). This value is required to encrypt the 
 first block of plaintext data. For RijndaelManaged class IV must be 
 exactly 16 ASCII characters long.
 </param>
	<param name="keySize">
 Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
 Longer keys are more secure than shorter keys.
 </param>
	<returns>
 Encrypted value formatted as a base64-encoded string.
 </returns>
</member><member name="M:WikiFunctions.Encryption.RijndaelSimple.Decrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
	<summary>
 Decrypts specified ciphertext using Rijndael symmetric key algorithm.
 </summary>
	<param name="cipherText">
 Base64-formatted ciphertext value.
 </param>
	<param name="passPhrase">
 Passphrase from which a pseudo-random password will be derived. The 
 derived password will be used to generate the encryption key. 
 Passphrase can be any string. In this example we assume that this 
 passphrase is an ASCII string.
 </param>
	<param name="saltValue">
 Salt value used along with passphrase to generate password. Salt can 
 be any string. In this example we assume that salt is an ASCII string.
 </param>
	<param name="hashAlgorithm">
 Hash algorithm used to generate password. Allowed values are: "MD5" and
 "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
 </param>
	<param name="passwordIterations">
 Number of iterations used to generate password. One or two iterations
 should be enough.
 </param>
	<param name="initVector">
 Initialization vector (or IV). This value is required to encrypt the 
 first block of plaintext data. For RijndaelManaged class IV must be 
 exactly 16 ASCII characters long.
 </param>
	<param name="keySize">
 Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
 Longer keys are more secure than shorter keys.
 </param>
	<returns>
 Decrypted string value.
 </returns>
	<remarks>
 Most of the logic in this function is similar to the Encrypt 
 logic. In order for decryption to work, all parameters of this function
 - except cipherText value - must match the corresponding parameters of 
 the Encrypt function which was called to generate the 
 ciphertext.
 </remarks>
</member><member name="T:WikiFunctions.Encryption.RijndaelSimple">
	<summary>
 This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
 decrypt data. As long as encryption and decryption routines use the same 
 parameters to generate the keys, the keys are guaranteed to be the same.
 </summary>
 The class uses static functions with duplicate code to make it easier to 
 demonstrate encryption and decryption logic. In a real-life application, 
 this may not be the most efficient way of handling encryption, so - as 
 soon as you feel comfortable with it - you may want to redesign this class.

</member><member name="T:WikiFunctions.Logging.Uploader.UploadableLogSettings2">
	<summary>
 An extended base class with extra properties for a comprehensive logging solution
 </summary>
</member><member name="T:WikiFunctions.Logging.TraceManager">
	<summary>
 An inheritable implementation of a Logging manager, built around a generic collection of IMyTraceListener objects and String keys
 </summary>
</member><member name="T:WikiFunctions.Logging.WikiTraceListener">
	<summary>
 This class logs in wiki format
 </summary>
</member><member name="T:WikiFunctions.Logging.XHTMLTraceListener">
	<summary>
 This class logs in XHTML format
 </summary>
</member><member name="P:WikiFunctions.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:WikiFunctions.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:WikiFunctions.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:WikiFunctions.Logging.IMyTraceListener.Uploadable">
	<summary>
 Is this trace listener an upload client?
 </summary>
	<returns><b>True</b> if the trace listener can upload to Wikipedia</returns>
</member><member name="T:WikiFunctions.Logging.IMyTraceListener">
	<summary>
 This interface is implemented by all TraceListener objects
 </summary>
</member><member name="T:WikiFunctions.Logging.TraceListenerBase">
	<summary>
 This abstract class can be used to build trace listener classes, or you can build a class from scratch and implement IMyTraceListener
 </summary>
</member>
</members>
</doc>